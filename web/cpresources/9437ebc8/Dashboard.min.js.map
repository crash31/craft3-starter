{"version":3,"sources":["dashboard/src/Dashboard.js"],"names":["$","Craft","Dashboard","Garnish","Base","extend","$widgetManagerBtn","widgetTypes","grid","widgets","widgetManager","widgetAdminTable","widgetSettingsModal","$doc","ready","addListener","data","proxy","this","$grid","property","defaultValue","menu","on","getTypeInfo","type","handleNewWidgetOptionSelect","e","$option","toLowerCase","append","settingsNamespace","Math","floor","random","settingsHtml","replace","settingsJs","$gridItem","$container","class","data-type","addClass","name","value","Widget","t","length","$items","scrollContainerToElement","response","role","text","appendTo","$noWidgets","$widgets","widget","noObjectsSelector","insertAfter","HUD","removeClass","lastWidget","postActionRequest","textStatus","success","i","ids","prependTo","showWidgetManager","show","resetItemOrder","find","$form","$bod","$table","eq","id","getManagerRow","$tbody","hudClass","onShow","onHide","AdminTable","tableSelector","sortable","reorderAction","deleteAction","onReorderItems","container","initSettingsFn","parent","children","onDeleteItem","$front","$settingsContainer","$btnsContainer","$title","getColspan","$heading","$bodyContainer","$settingsForm","$settingsErrorList","setSettingsHtml","subtitle","totalCols","$settingsBtn","showingSettings","refreshSettings","requestAnimationFrame","initUiElements","title","window","dashboard","velocity","height","$subtitle","preventDefault","hasClass","$settingsSpinner","onShowBack","remove","initBackUi","displayNotice","$back","destroy","update","hideSettings","displayError","setColspan","colspan","refreshCols","info","addRow","showSettings","complete","appendHeadHtml","appendFootHtml","footHtml","serialize","cancelSettings","action","cp","errors","ui","valueLabel","attr","prepend","colspanPicker","refresh","html","getManagerRowLabel","escapeHtml","bodyHtml","headHtml","eval","onShowFront","removeListener","setTimeout","trigger","updateContainerHeight","$row","SlidePicker","min","max","step","num","onChange","typeName","base","removeItems","jQuery"],"mappings":"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","file":"Dashboard.min.js","sourcesContent":["(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    /**\n     * Dashboard class\n     */\n    Craft.Dashboard = Garnish.Base.extend(\n        {\n            $grid: null,\n            $widgetManagerBtn: null,\n\n            widgetTypes: null,\n            grid: null,\n            widgets: null,\n            widgetManager: null,\n            widgetAdminTable: null,\n            widgetSettingsModal: null,\n\n            init: function(widgetTypes) {\n                this.widgetTypes = widgetTypes;\n                this.widgets = {};\n\n                this.$widgetManagerBtn = $('#widgetManagerBtn');\n\n                this.addListener(this.$widgetManagerBtn, 'click', 'showWidgetManager');\n\n                Garnish.$doc.ready($.proxy(function() {\n                    this.$grid = $('#dashboard-grid');\n                    this.grid = this.$grid.data('grid');\n                    $('#newwidgetmenubtn').data('menubtn').menu.on('optionselect', $.proxy(this, 'handleNewWidgetOptionSelect'));\n                }, this));\n            },\n\n            getTypeInfo: function(type, property, defaultValue) {\n                if (property) {\n                    if (typeof this.widgetTypes[type][property] === 'undefined') {\n                        return defaultValue;\n                    }\n                    else {\n                        return this.widgetTypes[type][property];\n                    }\n                }\n                else {\n                    return this.widgetTypes[type];\n                }\n            },\n\n            handleNewWidgetOptionSelect: function(e) {\n                var $option = $(e.selectedOption),\n                    type = $option.data('type'),\n                    settingsNamespace = 'newwidget' + Math.floor(Math.random() * 1000000000) + '-settings',\n                    settingsHtml = this.getTypeInfo(type, 'settingsHtml', '').replace(/__NAMESPACE__/g, settingsNamespace),\n                    settingsJs = this.getTypeInfo(type, 'settingsJs', '').replace(/__NAMESPACE__/g, settingsNamespace),\n                    $gridItem = $('<div class=\"item\" data-colspan=\"1\" style=\"display: block\">'),\n                    $container = $('<div/>', {\n                      'class': 'widget new loading-new scaleout',\n                      'data-type': type,\n                    })\n                      .addClass(type.toLowerCase())\n                      .append(\n                        $('<div/>', {'class': 'front'})\n                          .append(\n                            $('<div/>', {'class': 'pane'})\n                              .append(\n                                $('<div/>', {'class': 'spinner body-loading'})\n                              )\n                              .append(\n                                $('<div/>', {'class': 'widget-heading'})\n                                  .append('<h2/>')\n                                  .append('<h5/>')\n                              )\n                              .append(\n                                $('<div/>', {'class': 'body'})\n                              )\n                              .append(\n                                $('<div/>', {'class': 'settings icon hidden'})\n                              )\n                          )\n                      )\n                      .append(\n                        $('<div/>', {'class': 'back'})\n                          .append(\n                            $('<form/>', {'class': 'pane'})\n                              .append(\n                                $('<input/>', {\n                                  type: 'hidden',\n                                  name: 'type',\n                                  value: type,\n                                })\n                              )\n                              .append(\n                                $('<input/>', {\n                                  type: 'hidden',\n                                  name: 'settingsNamespace',\n                                  value: settingsNamespace,\n                                })\n                              )\n                              .append(\n                                $('<h2/>', {\n                                  text: Craft.t('app', '{type} Settings', {\n                                    type: $option.data('name')\n                                  }),\n                                })\n                              )\n                              .append(\n                                $('<div/>', {'class': 'settings'})\n                              )\n                              .append('<hr/>')\n                              .append(\n                                $('<div/>', {'class': 'buttons clearafter'})\n                                  .append(\n                                    $('<input/>', {\n                                      type: 'submit',\n                                      'class': 'btn submit',\n                                      value: Craft.t('app', 'Save'),\n                                    })\n                                  )\n                                  .append(\n                                    $('<div/>', {\n                                      'class': 'btn',\n                                      role: 'button',\n                                      text: Craft.t('app', 'Cancel')\n                                    })\n                                  )\n                                  .append(\n                                    $('<div/>', {'class': 'spinner hidden'})\n                                  )\n                              )\n                          )\n                      )\n                      .appendTo($gridItem);\n\n                if (settingsHtml) {\n                    $container.addClass('flipped');\n                }\n                else {\n                    $container.addClass('loading');\n                }\n\n                var widget = new Craft.Widget($container, settingsHtml.replace(/__NAMESPACE__/g, settingsNamespace), function() {\n                    eval(settingsJs);\n                });\n\n                // Append the new widget after the last one\n                // (can't simply append it to the grid container, since that will place it after the resize listener object)\n\n                if (this.grid.$items.length) {\n                    $gridItem.insertAfter(this.grid.$items.last());\n                }\n                else {\n                    $gridItem.prependTo(this.grid.$container);\n                }\n\n                this.grid.addItems($gridItem);\n                Garnish.scrollContainerToElement($gridItem);\n\n                $container.removeClass('scaleout');\n\n                if (!settingsHtml) {\n                    var data = {\n                        type: type\n                    };\n\n                    Craft.postActionRequest('dashboard/create-widget', data, function(response, textStatus) {\n                        if (textStatus === 'success' && response.success) {\n                            $container.removeClass('loading');\n                            widget.update(response);\n                        }\n                        else {\n                            widget.destroy();\n                        }\n                    });\n                }\n            },\n\n            showWidgetManager: function() {\n                if (!this.widgetManager) {\n                    var $widgets = this.$grid.find('> .item > .widget'),\n                        $form = $(\n                            '<form method=\"post\" accept-charset=\"UTF-8\">' +\n                            '<input type=\"hidden\" name=\"action\" value=\"widgets/save-widget\"/>' +\n                            '</form>'\n                        ).appendTo(Garnish.$bod),\n                        $noWidgets = $('<p id=\"nowidgets\"' + ($widgets.length ? ' class=\"hidden\"' : '') + '>' + Craft.t('app', 'You don’t have any widgets yet.') + '</p>').appendTo($form),\n                        $table = $('<table class=\"data' + (!$widgets.length ? ' hidden' : '') + '\"/>').appendTo($form),\n                        $tbody = $('<tbody/>').appendTo($table);\n\n                    for (var i = 0; i < $widgets.length; i++) {\n                        var $widget = $widgets.eq(i),\n                            widget = $widget.data('widget');\n\n                        // Make sure it's actually saved\n                        if (!widget || !widget.id) {\n                            continue;\n                        }\n\n                        widget.getManagerRow().appendTo($tbody);\n                    }\n\n                    this.widgetManager = new Garnish.HUD(this.$widgetManagerBtn, $form, {\n                        hudClass: 'hud widgetmanagerhud',\n                        onShow: $.proxy(function() {\n                            this.$widgetManagerBtn.addClass('active');\n                        }, this),\n                        onHide: $.proxy(function() {\n                            this.$widgetManagerBtn.removeClass('active');\n                        }, this)\n                    });\n\n                    this.widgetAdminTable = new Craft.AdminTable({\n                        tableSelector: $table,\n                        noObjectsSelector: $noWidgets,\n                        sortable: true,\n                        reorderAction: 'dashboard/reorder-user-widgets',\n                        deleteAction: 'dashboard/delete-user-widget',\n                        onReorderItems: $.proxy(function(ids) {\n                            var lastWidget = null;\n\n                            for (var i = 0; i < ids.length; i++) {\n                                var widget = this.widgets[ids[i]];\n\n                                if (!lastWidget) {\n                                    widget.$gridItem.prependTo(this.$grid);\n                                }\n                                else {\n                                    widget.$gridItem.insertAfter(lastWidget.$gridItem);\n                                }\n\n                                lastWidget = widget;\n                            }\n\n                            this.grid.resetItemOrder();\n                        }, this),\n                        onDeleteItem: $.proxy(function(id) {\n                            var widget = this.widgets[id];\n\n                            widget.destroy();\n                        }, this)\n                    });\n                }\n                else {\n                    this.widgetManager.show();\n                }\n            }\n        });\n\n\n    /**\n     * Dashboard Widget class\n     */\n    Craft.Widget = Garnish.Base.extend(\n        {\n            $container: null,\n            $gridItem: null,\n\n            $front: null,\n            $settingsBtn: null,\n            $title: null,\n            $subtitle: null,\n            $heading: null,\n            $bodyContainer: null,\n\n            $back: null,\n            $settingsForm: null,\n            $settingsContainer: null,\n            $settingsSpinner: null,\n            $settingsErrorList: null,\n\n            id: null,\n            type: null,\n            title: null,\n            subtitle: null,\n\n            totalCols: null,\n            settingsHtml: null,\n            initSettingsFn: null,\n            showingSettings: false,\n\n            colspanPicker: null,\n\n            init: function(container, settingsHtml, initSettingsFn) {\n                this.$container = $(container);\n                this.$gridItem = this.$container.parent();\n\n                // Store a reference to this object on the container element\n                this.$container.data('widget', this);\n\n                // Do a little introspection\n                this.id = this.$container.data('id');\n                this.type = this.$container.data('type');\n                this.title = this.$container.data('title');\n\n                if (this.id) {\n                    // Store a reference to this object on the main Dashboard object\n                    window.dashboard.widgets[this.id] = this;\n                }\n\n                this.$front = this.$container.children('.front');\n                this.$settingsBtn = this.$front.find('> .pane > .icon.settings');\n                this.$heading = this.$front.find('> .pane > .widget-heading');\n                this.$title = this.$heading.find('> h2');\n                this.$subtitle = this.$heading.find('> h5');\n                this.$bodyContainer = this.$front.find('> .pane > .body');\n\n                this.setSettingsHtml(settingsHtml, initSettingsFn);\n\n                if (!this.$container.hasClass('flipped')) {\n                    this.onShowFront();\n                }\n                else {\n                    this.initBackUi();\n                    this.refreshSettings();\n                    this.onShowBack();\n                }\n\n                this.addListener(this.$settingsBtn, 'click', 'showSettings');\n            },\n\n            initBackUi: function() {\n                this.$back = this.$container.children('.back');\n                this.$settingsForm = this.$back.children('form');\n                this.$settingsContainer = this.$settingsForm.children('.settings');\n                var $btnsContainer = this.$settingsForm.children('.buttons');\n                this.$settingsSpinner = $btnsContainer.children('.spinner');\n\n                this.addListener($btnsContainer.children('.btn:nth-child(2)'), 'click', 'cancelSettings');\n                this.addListener(this.$settingsForm, 'submit', 'saveSettings');\n            },\n\n            getColspan: function() {\n                return this.$gridItem.data('colspan');\n            },\n\n            setColspan: function(colspan) {\n                this.$gridItem.data('colspan', colspan);\n                window.dashboard.grid.refreshCols(true);\n            },\n\n            getTypeInfo: function(property, defaultValue) {\n                return window.dashboard.getTypeInfo(this.type, property, defaultValue);\n            },\n\n            setSettingsHtml: function(settingsHtml, initSettingsFn) {\n                this.settingsHtml = settingsHtml;\n                this.initSettingsFn = initSettingsFn;\n\n                if (this.settingsHtml) {\n                    this.$settingsBtn.removeClass('hidden');\n                }\n                else {\n                    this.$settingsBtn.addClass('hidden');\n                }\n            },\n\n            refreshSettings: function() {\n                this.$settingsContainer.html(this.settingsHtml);\n\n                Garnish.requestAnimationFrame($.proxy(function() {\n                    Craft.initUiElements(this.$settingsContainer);\n                    this.initSettingsFn();\n                }, this));\n            },\n\n            showSettings: function() {\n                if (!this.$back) {\n                    this.initBackUi();\n                }\n\n                // Refresh the settings every time\n                this.refreshSettings();\n\n                this.$container\n                    .addClass('flipped')\n                    .velocity({height: this.$back.height()}, {\n                        complete: $.proxy(this, 'onShowBack')\n                    });\n            },\n\n            hideSettings: function() {\n                this.$container\n                    .removeClass('flipped')\n                    .velocity({height: this.$front.height()}, {\n                        complete: $.proxy(this, 'onShowFront')\n                    });\n            },\n\n            saveSettings: function(e) {\n                e.preventDefault();\n                this.$settingsSpinner.removeClass('hidden');\n\n                var action = this.$container.hasClass('new') ? 'dashboard/create-widget' : 'dashboard/save-widget-settings',\n                    data = this.$settingsForm.serialize();\n\n                Craft.postActionRequest(action, data, $.proxy(function(response, textStatus) {\n                    this.$settingsSpinner.addClass('hidden');\n\n                    if (textStatus === 'success') {\n                        if (this.$settingsErrorList) {\n                            this.$settingsErrorList.remove();\n                            this.$settingsErrorList = null;\n                        }\n\n                        if (response.success) {\n                            Craft.cp.displayNotice(Craft.t('app', 'Widget saved.'));\n\n                            // Make sure the widget is still allowed to be shown, just in case\n                            if (!response.info) {\n                                this.destroy();\n                            }\n                            else {\n                                this.update(response);\n                                this.hideSettings();\n                            }\n                        }\n                        else {\n                            Craft.cp.displayError(Craft.t('app', 'Couldn’t save widget.'));\n\n                            if (response.errors) {\n                                this.$settingsErrorList = Craft.ui.createErrorList(response.errors)\n                                    .insertAfter(this.$settingsContainer);\n                            }\n                        }\n                    }\n                }, this));\n            },\n\n            update: function(response) {\n                this.title = response.info.title;\n                this.subtitle = response.info.subtitle;\n\n                // Is this a new widget?\n                if (this.$container.hasClass('new')) {\n                    // Discover ourself\n                    this.id = response.info.id;\n\n                    this.$container\n                        .attr('id', 'widget' + this.id)\n                        .removeClass('new loading-new');\n\n                    if (this.$settingsForm) {\n                        this.$settingsForm.prepend('<input type=\"hidden\" name=\"widgetId\" value=\"' + this.id + '\"/>');\n                    }\n\n                    // Store a reference to this object on the main Dashboard object, now that the widget actually exists\n                    window.dashboard.widgets[this.id] = this;\n\n                    if (window.dashboard.widgetAdminTable) {\n                        window.dashboard.widgetAdminTable.addRow(this.getManagerRow());\n                    }\n                }\n                else {\n                    if (window.dashboard.widgetAdminTable) {\n                        window.dashboard.widgetAdminTable.$tbody.children('[data-id=\"' + this.id + '\"]:first').children('td:nth-child(2)').html(this.getManagerRowLabel());\n                    }\n                }\n\n                if (!this.title && !this.subtitle) {\n                    this.$heading.remove();\n                } else {\n                    if (this.title) {\n                        this.$title.text(this.title);\n                    } else {\n                        this.$title.remove();\n                    }\n\n                    if (this.subtitle) {\n                        this.$subtitle.text(this.subtitle);\n                    } else {\n                        this.$subtitle.remove();\n                    }\n                }\n\n                this.$bodyContainer.html(response.info.bodyHtml);\n\n                // New colspan?\n                if (response.info.colspan != this.getColspan()) {\n                    this.setColspan(response.info.colspan);\n                    Garnish.scrollContainerToElement(this.$gridItem);\n                }\n\n                Craft.initUiElements(this.$bodyContainer);\n                Craft.appendHeadHtml(response.headHtml);\n                Craft.appendFootHtml(response.footHtml);\n\n                this.setSettingsHtml(response.info.settingsHtml, function() {\n                    eval(response.info.settingsJs);\n                });\n            },\n\n            cancelSettings: function() {\n                if (this.id) {\n                    this.hideSettings();\n                }\n                else {\n                    this.destroy();\n                }\n            },\n\n            onShowFront: function() {\n                this.showingSettings = false;\n                this.removeListener(this.$back, 'resize');\n                this.addListener(this.$front, 'resize', 'updateContainerHeight');\n            },\n\n            onShowBack: function() {\n                this.showingSettings = true;\n                this.removeListener(this.$front, 'resize');\n                this.addListener(this.$back, 'resize', 'updateContainerHeight');\n\n                // Focus on the first input\n                setTimeout($.proxy(function() {\n                    this.$settingsForm.find(':focusable:first').trigger('focus');\n                }, this), 1);\n            },\n\n            updateContainerHeight: function() {\n                this.$container.height((this.showingSettings ? this.$back : this.$front).height());\n            },\n\n            getManagerRow: function() {\n                var $row = $(\n                    '<tr data-id=\"' + this.id + '\" data-name=\"' + Craft.escapeHtml(this.title) + '\">' +\n                    '<td class=\"widgetmanagerhud-icon\">' + this.getTypeInfo('iconSvg') + '</td>' +\n                    '<td>' + this.getManagerRowLabel() + '</td>' +\n                    '<td class=\"widgetmanagerhud-col-colspan-picker thin\"></td>' +\n                    '<td class=\"widgetmanagerhud-col-move thin\"><a class=\"move icon\" title=\"' + Craft.t('app', 'Reorder') + '\" role=\"button\"></a></td>' +\n                    '<td class=\"thin\"><a class=\"delete icon\" title=\"' + Craft.t('app', 'Delete') + '\" role=\"button\"></a></td>' +\n                    '</tr>'\n                );\n\n                // Initialize the colspan picker\n                this.colspanPicker = new Craft.SlidePicker(this.getColspan(), {\n                    min: 1,\n                    max: () => {\n                        return window.dashboard.grid.totalCols;\n                    },\n                    step: 1,\n                    valueLabel: colspan => {\n                        return Craft.t('app', '{num, number} {num, plural, =1{column} other{columns}}', {\n                            num: colspan,\n                        });\n                    },\n                    onChange: colspan => {\n                        // Update the widget and grid\n                        this.setColspan(colspan);\n                        window.dashboard.grid.refreshCols(true);\n\n                        // Save the change\n                        let data = {\n                            id: this.id,\n                            colspan: colspan\n                        };\n\n                        Craft.postActionRequest('dashboard/change-widget-colspan', data, (response, textStatus) => {\n                            if (textStatus === 'success' && response.success) {\n                                Craft.cp.displayNotice(Craft.t('app', 'Widget saved.'));\n                            }\n                            else {\n                                Craft.cp.displayError(Craft.t('app', 'Couldn’t save widget.'));\n                            }\n                        });\n                    }\n                });\n\n                this.colspanPicker.$container.appendTo($row.find('> td.widgetmanagerhud-col-colspan-picker'));\n                window.dashboard.grid.on('refreshCols', () => {\n                    this.colspanPicker.refresh();\n                });\n\n                return $row;\n            },\n\n            getManagerRowLabel: function() {\n                var typeName = this.getTypeInfo('name');\n\n                return Craft.escapeHtml(this.title) + (this.title !== typeName ? ' <span class=\"light\">(' + typeName + ')</span>' : '');\n            },\n\n            destroy: function() {\n                delete window.dashboard.widgets[this.id];\n                this.$container.addClass('scaleout');\n                this.base();\n\n                setTimeout($.proxy(function() {\n                    window.dashboard.grid.removeItems(this.$gridItem);\n                    this.$gridItem.remove();\n                }, this), 200);\n            }\n        });\n})(jQuery);\n"]}